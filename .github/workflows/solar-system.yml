name:  Solar System Workflow

on:
    workflow_dispatch:
    push:
      branches: 
      - main
      - feature/*

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}} 
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
            - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodejs_version: [18, 19]
            os: [ubuntu-latest]
            exclude:
            - nodejs_version: [19, 20]
              os: macos-latest
        runs-on: ${{matrix.os}}
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        
        - name: Setup Node JS Version - ${{matrix.nodejs_version}}
          uses: actions/Setup-Node@v3
          with:
            node-version: ${{matrix.nodejs_version}}


        - name: Composite Action - Cache & Install NPM Packages
          uses: ./.github/custom-actions/npm-action
          with:
            folder-path: node_modules
        - name: Unit Testing
          run: npm test

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      container: 
        image: node:18
      services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
               --name mongo
      env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
      steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
#      - name: Setup NodeJS v18
#        uses: actions/Setup-Node@v3
#        with:
#          node-version: 18
      
      - name: Composite Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-action
        with:
          folder-path: node_modules
      
      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v3
        if:
          always ()
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5 

    reports-S3:
      needs: [code-coverage, unit-testing]
      name: AWS-S3 - Upload Reports
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
      - name: Download Mocha test Artifact
        uses: actions/download-artifact@v3
        with:
          name: Mocha-Test-Result

      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v3
        with:
          name: Code-Coverage-Result
      
      - name: MergeTest Files
        run: |
          ls -ltr
          mkdir reports-${{github.sha}}
          mv cobertura-coverage.xml reports-${{github.sha}}
          mv test-results.xml reports-${{github.sha}}
          ls -ltr reports-${{github.sha}}
      
      - name: Upload AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: 'af-south-1'   # optional: defaults to us-east-1
          SOURCE_DIR: 'reports-${{github.sha}}'      # optional: defaults to entire repository  
          DEST_DIR: 'reports-${{github.sha}}'  
    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      permissions:
        packages:  write
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Dockerhub login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{vars.DCKR_USER}}
          password: ${{secrets.DCKR_PASS}}
        
      - name: GHCR login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{github.repository_owner}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Docker Build for Testing 
        uses: docker/Build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{vars.DCKR_USER}}/solar-system:${{github.sha}}

      - name: Docker Image Testing
        run:  |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{vars.DCKR_USER}}/solar-system:${{ github.sha }}
        
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live
    
      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DCKR_USER}}/solar-system:${{github.sha}}
            ghcr.io/${{github.repository_owner}}/solar-system:${{github.sha}}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      with:
        mongo-uri: ${{vars.MONGO_URI}}
        k8s-manifest-dir: kubernetes/development/
        environment: development
      secrets: 
        k8sconfig: ${{secrets.RUN_KUBECONFIG}}
        mongodb: ${{secrets.MONGO_PASSWORD}}
      
    dev-integration-testing:
      name: Dev Integration Testing
      if: contains(github.ref, 'feature/')
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
      - name: Test URL Output using curl and jq
        env:
          URL: ${{needs.dev-deploy.outputs.application-url}}
        run: |
          echo $URL

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      with:
        mongo-uri: ${{vars.MONGO_URI}}
        k8s-manifest-dir: kubernetes/production/
        environment: production
      secrets: 
        k8sconfig: ${{secrets.RUN_KUBECONFIG}}
        mongodb: ${{secrets.MONGO_PASSWORD}}
    prod-integration-testing:
      name: Prod Integration Testing
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
      - name: Test URL Output using curl and jq
        env:
          URL: ${{needs.prod-deploy.outputs.application-url}}
        run: |
          echo $URL
          

    
